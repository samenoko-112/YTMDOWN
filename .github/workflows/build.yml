name: Build for Windows

on:
  push:
    tags:
      - 'v*'
      - 'test-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'リリースバージョン (例: v1.2.3)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'リリースノート（任意）'
        required: false
        default: '自動生成されたリリースです。'

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      VERSION: ${{ github.event.inputs.version || github.ref_name }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧹 Clean previous dist
      run: |
        if (Test-Path -Path "dist") { Remove-Item -Recurse -Force "dist" }

    - name: 🔨 Build PyInstaller bootloader
      run: |
        git clone https://github.com/pyinstaller/pyinstaller.git
        cd pyinstaller/bootloader
        python ./waf distclean all
        cd ..
        pip install -e .
        
    - name: 🚀 Build EXE with Flet Pack
      run: |
        flet pack .\main.py --name YTMDOWN --onedir --product-name YTMDOWN --add-data "lang;lang" --copyright samenoko-112 -y
        # flet pack の出力先を確認
        Write-Host "dist ディレクトリの内容:"
        Get-ChildItem -Path "dist" -Recurse | Format-Table -AutoSize
        if (!(Test-Path -Path "dist/YTMDOWN/YTMDOWN.exe")) {
          Write-Error "dist/YTMDOWN/YTMDOWN.exe が見つかりません。flet pack の出力を確認してください。"
          exit 1
        }

    - name: 🗜️ Create ZIP Archive
      run: |
        # ZIP アーカイブを作成する前にファイルの存在を確認
        if (!(Test-Path -Path "dist/YTMDOWN")) {
          Write-Error "dist/YTMDOWN ディレクトリが見つかりません。"
          exit 1
        }
        Compress-Archive -Path dist/YTMDOWN/* -DestinationPath dist/YTMDOWN-${{ env.VERSION }}-windows.zip -Force
        if (!(Test-Path -Path "dist/YTMDOWN-${{ env.VERSION }}-windows.zip")) {
          Write-Error "ZIP アーカイブの作成に失敗しました。"
          exit 1
        }
        Write-Host "ZIP アーカイブが作成されました: dist/YTMDOWN-${{ env.VERSION }}-windows.zip"
        
    - name: 💿 Install NSIS
      run: |
        choco install nsis -y
        echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\Program Files\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: 📦 Build NSIS Installer
      run: |
        # build ディレクトリが存在しない場合は作成
        if (!(Test-Path -Path "build")) {
          New-Item -ItemType Directory -Path "build" -Force
        }
        Write-Host "NSIS に渡すバージョン: '${{ env.VERSION }}'"
        makensis -DAPP_VERSION="${{ env.VERSION }}" installer.nsi
        if (!(Test-Path -Path "build/YTMDOWN-${{ env.VERSION }}-setup.exe")) {
          Write-Error "NSIS インストーラーが生成されませんでした。installer.nsi を確認してください。"
          exit 1
        }
        Write-Host "NSIS インストーラーが作成されました: build/YTMDOWN-${{ env.VERSION }}-setup.exe"

    - name: 📤 Upload Artifacts (ZIP + Installer)
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/YTMDOWN-${{ env.VERSION }}-windows.zip
          build/YTMDOWN-${{ env.VERSION }}-setup.exe
        retention-days: 30

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.event.inputs.version || github.ref_name }}
    
    steps:
    - name: 📥 Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: ./artifacts
        
    - name: 🔍 Verify Artifacts
      run: |
        echo "アーティファクトの内容を確認:"
        ls -la ./artifacts/
        if [ ! -f "./artifacts/YTMDOWN-${{ env.VERSION }}-windows.zip" ]; then
          echo "エラー: ZIP ファイルが見つかりません"
          exit 1
        fi
        if [ ! -f "./artifacts/YTMDOWN-${{ env.VERSION }}-setup.exe" ]; then
          echo "エラー: インストーラーファイルが見つかりません"
          exit 1
        fi
        echo "すべてのアーティファクトが正常にダウンロードされました"
        
    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: YTMDOWN ${{ env.VERSION }}
        body: ${{ github.event.inputs.release_notes || '自動生成されたリリースです。' }}
        draft: true
        prerelease: false
        files: |
          ./artifacts/YTMDOWN-${{ env.VERSION }}-windows.zip
          ./artifacts/YTMDOWN-${{ env.VERSION }}-setup.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🧹 Cleanup Artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: windows-build
        failOnError: false
