name: Build for Windows

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        description: 'リリースバージョン (例: v1.2.3)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'リリースノート（任意）'
        required: false
        default: '自動生成されたリリースです。'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔨 Build PyInstaller bootloader
      run: |
        git clone https://github.com/pyinstaller/pyinstaller.git
        cd pyinstaller/bootloader
        python ./waf distclean all
        cd ..
        pip install -e .
        
    - name: 🚀 Build EXE with Flet Pack
      run: |
        flet pack .\main.py --name YTMDOWN --onedir --product-name YTMDOWN --copyright samenoko-112 -y
        if (!(Test-Path -Path "dist/YTMDOWN/YTMDOWN.exe")) {
          Write-Error "dist/YTMDOWN/YTMDOWN.exe が見つかりません。flet pack の出力を確認してください。"
          exit 1
        }

    # 👇 ここから Inno Setup 関連 👇

    # 先頭に #define AppVersion を差し込んだ一時ファイルを作成
    - name: 🧩 Prepare installer.build.iss with version define
      run: |
        $version = "${{ github.event.inputs.version || github.ref_name }}"
        $appVersion = ($version -replace '^v', '')
        if ([string]::IsNullOrWhiteSpace($appVersion)) { $appVersion = '1.0.0' }
        $defineLine = ('#define AppVersion "{0}"' -f $appVersion)
        $content = Get-Content -Raw installer.iss
        @($defineLine, $content) | Set-Content -Path installer.build.iss -Encoding UTF8
      shell: pwsh

    - name: 📦 Compile Installer with Inno Setup
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.7  # 最新版
      with:
        path: installer.build.iss
        options: /O+ /Q  # 最適化 + クワイエット

    - name: 🏷️ Collect Installer
      run: |
        $installer = Join-Path "installer_output" "YTMDOWN-Setup.exe"
        if (Test-Path $installer) {
          Copy-Item -Path $installer -Destination "./YTMDOWN-Setup.exe" -Force
        } else {
          Write-Error "インストーラーが見つかりません。installer.iss を確認してください。"
          exit 1
        }

    - name: 🗜️ Create ZIP Archive
      run: |
        if (!(Test-Path -Path "dist/YTMDOWN")) {
          Write-Error "dist/YTMDOWN フォルダが存在しません。ビルドが失敗している可能性があります。"
          exit 1
        }
        Compress-Archive -Path dist/YTMDOWN/* -DestinationPath dist/YTMDOWN-windows.zip -Force
        
    - name: 📤 Upload Artifacts (ZIP + Installer)
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/YTMDOWN-windows.zip
          YTMDOWN-Setup.exe

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        
    - name: 🏷️ Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: YTMDOWN ${{ github.event.inputs.version || github.ref_name }}
        body: ${{ github.event.inputs.release_notes || '自動生成されたリリースです。' }}
        draft: true
        prerelease: false
        files: |
          YTMDOWN-Setup.exe
          dist/YTMDOWN-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🧹 Cleanup Artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: windows-build
        failOnError: false